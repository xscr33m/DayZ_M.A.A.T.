//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DayZ_MAAT._Core._Language._Stringtables {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class TraderConverterRes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal TraderConverterRes() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DayZ_MAAT._Core._Language._Stringtables.TraderConverterRes", typeof(TraderConverterRes).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Konvertierung wurde abgebrochen! ähnelt.
        /// </summary>
        internal static string de_Canceled {
            get {
                return ResourceManager.GetString("de_Canceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Die Datei &quot;TraderPlusPriceConfig.json&quot; ist bereits vorhanden. 
        ///
        ///Möchtest Du sie überschreiben? ähnelt.
        /// </summary>
        internal static string de_ExistingFile {
            get {
                return ResourceManager.GetString("de_ExistingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keine Datei definiert! ähnelt.
        /// </summary>
        internal static string de_LabelNoInput {
            get {
                return ResourceManager.GetString("de_LabelNoInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Konvertiere... Bitte warten... ähnelt.
        /// </summary>
        internal static string de_LabelStatusConverting {
            get {
                return ResourceManager.GetString("de_LabelStatusConverting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Konvertierung wurde mit Fehlern abgeschlossen. Prüfe das Log! ähnelt.
        /// </summary>
        internal static string de_LabelStatusErrored {
            get {
                return ResourceManager.GetString("de_LabelStatusErrored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Konvertierung wurde abgeschlossen! ähnelt.
        /// </summary>
        internal static string de_LabelStatusFinished {
            get {
                return ResourceManager.GetString("de_LabelStatusFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;Fehler in Zeile ähnelt.
        /// </summary>
        internal static string de_LogConvertError1 {
            get {
                return ResourceManager.GetString("de_LogConvertError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ungültiges Produktformat.&gt;
        /// ähnelt.
        /// </summary>
        internal static string de_LogConvertError2 {
            get {
                return ResourceManager.GetString("de_LogConvertError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;Fehler beim Konvertieren der Datei: ähnelt.
        /// </summary>
        internal static string de_LogConvertFatalError {
            get {
                return ResourceManager.GetString("de_LogConvertFatalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Konvertierung abgeschlossen.&gt; ähnelt.
        /// </summary>
        internal static string de_LogConvertFinish {
            get {
                return ResourceManager.GetString("de_LogConvertFinish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Konvertiere Zeile  ähnelt.
        /// </summary>
        internal static string de_LogConvertLine {
            get {
                return ResourceManager.GetString("de_LogConvertLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Ignorierte Leere Zeile  ähnelt.
        /// </summary>
        internal static string de_LogIgnoredEmptyLine {
            get {
                return ResourceManager.GetString("de_LogIgnoredEmptyLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Ignorierte Zeile  ähnelt.
        /// </summary>
        internal static string de_LogIgnoredLine {
            get {
                return ResourceManager.GetString("de_LogIgnoredLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Initialisierung....&gt; ähnelt.
        /// </summary>
        internal static string de_LogInitialising {
            get {
                return ResourceManager.GetString("de_LogInitialising", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Lese Datei....&gt; ähnelt.
        /// </summary>
        internal static string de_LogLoading {
            get {
                return ResourceManager.GetString("de_LogLoading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Keine Datei definiert.&gt; ähnelt.
        /// </summary>
        internal static string de_LogNoInput {
            get {
                return ResourceManager.GetString("de_LogNoInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Beginne Konvertierung....&gt;
        /// ähnelt.
        /// </summary>
        internal static string de_LogStartConvert {
            get {
                return ResourceManager.GetString("de_LogStartConvert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Anzahl konvertierte Kategorien: ähnelt.
        /// </summary>
        internal static string de_LogTotalCategories {
            get {
                return ResourceManager.GetString("de_LogTotalCategories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;Die folgenden Zeilen wurden aufgrund ungültiger Werte nicht konvertiert:&gt; ähnelt.
        /// </summary>
        internal static string de_LogTotalError {
            get {
                return ResourceManager.GetString("de_LogTotalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;Prüfe die Ursprungsdatei nach den fehlerhaften Zeilen und versuche es erneut.&gt; ähnelt.
        /// </summary>
        internal static string de_LogTotalErrorHint {
            get {
                return ResourceManager.GetString("de_LogTotalErrorHint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Anzahl konvertierte Produkte: ähnelt.
        /// </summary>
        internal static string de_LogTotalProducts {
            get {
                return ResourceManager.GetString("de_LogTotalProducts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The conversion was canceled! ähnelt.
        /// </summary>
        internal static string en_Canceled {
            get {
                return ResourceManager.GetString("en_Canceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The &quot;TraderPlusPriceConfig.json&quot; file already exists. 
        ///
        ///Would you like to overwrite it? ähnelt.
        /// </summary>
        internal static string en_ExistingFile {
            get {
                return ResourceManager.GetString("en_ExistingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No file defined! ähnelt.
        /// </summary>
        internal static string en_LabelNoInput {
            get {
                return ResourceManager.GetString("en_LabelNoInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Converting... Please Wait... ähnelt.
        /// </summary>
        internal static string en_LabelStatusConverting {
            get {
                return ResourceManager.GetString("en_LabelStatusConverting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Conversion was completed with errors. Check the log! ähnelt.
        /// </summary>
        internal static string en_LabelStatusErrored {
            get {
                return ResourceManager.GetString("en_LabelStatusErrored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Conversion has been completed! ähnelt.
        /// </summary>
        internal static string en_LabelStatusFinished {
            get {
                return ResourceManager.GetString("en_LabelStatusFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;Error in line ähnelt.
        /// </summary>
        internal static string en_LogConvertError1 {
            get {
                return ResourceManager.GetString("en_LogConvertError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid product format.&gt;
        /// ähnelt.
        /// </summary>
        internal static string en_LogConvertError2 {
            get {
                return ResourceManager.GetString("en_LogConvertError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;Error while converting the file: ähnelt.
        /// </summary>
        internal static string en_LogConvertFatalError {
            get {
                return ResourceManager.GetString("en_LogConvertFatalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Conversion completed.&gt; ähnelt.
        /// </summary>
        internal static string en_LogConvertFinish {
            get {
                return ResourceManager.GetString("en_LogConvertFinish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Converting line  ähnelt.
        /// </summary>
        internal static string en_LogConvertLine {
            get {
                return ResourceManager.GetString("en_LogConvertLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Ignored empty line  ähnelt.
        /// </summary>
        internal static string en_LogIgnoredEmptyLine {
            get {
                return ResourceManager.GetString("en_LogIgnoredEmptyLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Ignored line  ähnelt.
        /// </summary>
        internal static string en_LogIgnoredLine {
            get {
                return ResourceManager.GetString("en_LogIgnoredLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Initializing....&gt; ähnelt.
        /// </summary>
        internal static string en_LogInitialising {
            get {
                return ResourceManager.GetString("en_LogInitialising", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Loading File....&gt; ähnelt.
        /// </summary>
        internal static string en_LogLoading {
            get {
                return ResourceManager.GetString("en_LogLoading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;No input file specified.&gt; ähnelt.
        /// </summary>
        internal static string en_LogNoInput {
            get {
                return ResourceManager.GetString("en_LogNoInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Start Converting....&gt;
        /// ähnelt.
        /// </summary>
        internal static string en_LogStartConvert {
            get {
                return ResourceManager.GetString("en_LogStartConvert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Total categories converted: ähnelt.
        /// </summary>
        internal static string en_LogTotalCategories {
            get {
                return ResourceManager.GetString("en_LogTotalCategories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;The following lines were not converted due to invalid values:&gt; ähnelt.
        /// </summary>
        internal static string en_LogTotalError {
            get {
                return ResourceManager.GetString("en_LogTotalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERROR] &lt;Check the origin file for the faulty lines to fix and try again.&gt; ähnelt.
        /// </summary>
        internal static string en_LogTotalErrorHint {
            get {
                return ResourceManager.GetString("en_LogTotalErrorHint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Total products converted: ähnelt.
        /// </summary>
        internal static string en_LogTotalProducts {
            get {
                return ResourceManager.GetString("en_LogTotalProducts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die La conversion a été interrompue ! ähnelt.
        /// </summary>
        internal static string fr_Canceled {
            get {
                return ResourceManager.GetString("fr_Canceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Le fichier &quot;TraderPlusPriceConfig.json&quot; existe déjà. 
        ///
        ///Tu veux l&apos;écraser ? ähnelt.
        /// </summary>
        internal static string fr_ExistingFile {
            get {
                return ResourceManager.GetString("fr_ExistingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Aucun fichier défini ! ähnelt.
        /// </summary>
        internal static string fr_LabelNoInput {
            get {
                return ResourceManager.GetString("fr_LabelNoInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Conversion... Veuillez patienter... ähnelt.
        /// </summary>
        internal static string fr_LabelStatusConverting {
            get {
                return ResourceManager.GetString("fr_LabelStatusConverting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die La conversion s&apos;est terminée avec des erreurs. Vérifie le journal ! ähnelt.
        /// </summary>
        internal static string fr_LabelStatusErrored {
            get {
                return ResourceManager.GetString("fr_LabelStatusErrored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die La conversion est terminée ! ähnelt.
        /// </summary>
        internal static string fr_LabelStatusFinished {
            get {
                return ResourceManager.GetString("fr_LabelStatusFinished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERREUR] &lt;Erreur dans la ligne ähnelt.
        /// </summary>
        internal static string fr_LogConvertError1 {
            get {
                return ResourceManager.GetString("fr_LogConvertError1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Format de produit non valide.&gt;
        /// ähnelt.
        /// </summary>
        internal static string fr_LogConvertError2 {
            get {
                return ResourceManager.GetString("fr_LogConvertError2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERREUR] &lt;Erreur lors de la conversion du fichier : ähnelt.
        /// </summary>
        internal static string fr_LogConvertFatalError {
            get {
                return ResourceManager.GetString("fr_LogConvertFatalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Conversion achevée&gt; ähnelt.
        /// </summary>
        internal static string fr_LogConvertFinish {
            get {
                return ResourceManager.GetString("fr_LogConvertFinish", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Convertir la ligne  ähnelt.
        /// </summary>
        internal static string fr_LogConvertLine {
            get {
                return ResourceManager.GetString("fr_LogConvertLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Ligne vide ignorée  ähnelt.
        /// </summary>
        internal static string fr_LogIgnoredEmptyLine {
            get {
                return ResourceManager.GetString("fr_LogIgnoredEmptyLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Ligne ignorée  ähnelt.
        /// </summary>
        internal static string fr_LogIgnoredLine {
            get {
                return ResourceManager.GetString("fr_LogIgnoredLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Initialisation....&gt; ähnelt.
        /// </summary>
        internal static string fr_LogInitialising {
            get {
                return ResourceManager.GetString("fr_LogInitialising", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Charge du fichier ....&gt; ähnelt.
        /// </summary>
        internal static string fr_LogLoading {
            get {
                return ResourceManager.GetString("fr_LogLoading", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Aucun fichier d&apos;entrée n&apos;a été spécifié.&gt; ähnelt.
        /// </summary>
        internal static string fr_LogNoInput {
            get {
                return ResourceManager.GetString("fr_LogNoInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Démarrer la conversion....&gt;
        /// ähnelt.
        /// </summary>
        internal static string fr_LogStartConvert {
            get {
                return ResourceManager.GetString("fr_LogStartConvert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Total des catégories converties : ähnelt.
        /// </summary>
        internal static string fr_LogTotalCategories {
            get {
                return ResourceManager.GetString("fr_LogTotalCategories", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERREUR] &lt;Les lignes suivantes n&apos;ont pas été converties en raison de valeurs non valides:&gt; ähnelt.
        /// </summary>
        internal static string fr_LogTotalError {
            get {
                return ResourceManager.GetString("fr_LogTotalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [ERREUR] &lt;Vérifier le fichier d&apos;origine pour les lignes défectueuses à corriger et réessayer&gt;. ähnelt.
        /// </summary>
        internal static string fr_LogTotalErrorHint {
            get {
                return ResourceManager.GetString("fr_LogTotalErrorHint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die [INFO] &lt;Total des produits convertis : ähnelt.
        /// </summary>
        internal static string fr_LogTotalProducts {
            get {
                return ResourceManager.GetString("fr_LogTotalProducts", resourceCulture);
            }
        }
    }
}
